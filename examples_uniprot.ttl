@prefix faldo: <http://biohackathon.org/resource/faldo#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix up:    <http://purl.uniprot.org/core/> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

[ sh:namespace  "http://purl.uniprot.org/keywords/"^^xsd:anyURI;
  sh:prefix     "keywords"
] .

[ sh:namespace  "http://purl.jp/bio/12/glyco/glycan#"^^xsd:anyURI;
  sh:prefix     "glycan"
] .

[ sh:namespace  "http://rdf.ebi.ac.uk/resource/ensembl.protein/"^^xsd:anyURI;
  sh:prefix     "ensemblprotein"
] .

[ sh:namespace  "https://swisslipids.org/rdf/SLM_"^^xsd:anyURI;
  sh:prefix     "SWISSLIPID"
] .

[ a             owl:Ontology;
  rdfs:comment  "This is a collection of SPARQL queries that are examples for use on different websites.";
  owl:imports   sh:;
  sh:declare    [ sh:namespace  "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI;
                  sh:prefix     "rdfs"
                ];
  sh:declare    [ sh:namespace  "http://rdf.ebi.ac.uk/terms/ensembl/"^^xsd:anyURI;
                  sh:prefix     "ensemblterms"
                ];
  sh:declare    [ sh:namespace  "https://rdf.metanetx.org/schema/"^^xsd:anyURI;
                  sh:prefix     "mnx"
                ];
  sh:declare    [ sh:namespace  "http://identifiers.org/insdc/"^^xsd:anyURI;
                  sh:prefix     "insdc"
                ];
  sh:declare    [ sh:namespace  "http://semanticscience.org/resource/"^^xsd:anyURI;
                  sh:prefix     "sio"
                ];
  sh:declare    [ sh:namespace  "http://nextprot.org/rdf#"^^xsd:anyURI;
                  sh:prefix     "np"
                ];
  sh:declare    [ sh:namespace  "http://www.w3.org/2004/02/skos/core#"^^xsd:anyURI;
                  sh:prefix     "skos"
                ];
  sh:declare    [ sh:namespace  "http://nextprot.org/rdf#"^^xsd:anyURI;
                  sh:prefix     "np"
                ];
  sh:declare    [ sh:namespace  "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI;
                  sh:prefix     "xsd"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/CHEBI_"^^xsd:anyURI;
                  sh:prefix     "CHEBI"
                ];
  sh:declare    [ sh:namespace  "http://purl.uniprot.org/uniprot/"^^xsd:anyURI;
                  sh:prefix     "uniprotkb"
                ];
  sh:declare    [ sh:namespace  "http://rdf.ebi.ac.uk/terms/chembl#"^^xsd:anyURI;
                  sh:prefix     "cco"
                ];
  sh:declare    [ sh:namespace  "http://identifiers.org/"^^xsd:anyURI;
                  sh:prefix     "identifiers"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/ontology/bibo/"^^xsd:anyURI;
                  sh:prefix     "bibo"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/genex#"^^xsd:anyURI;
                  sh:prefix     "genex"
                ];
  sh:declare    [ sh:namespace  "http://data.epo.org/linked-data/def/patent/"^^xsd:anyURI;
                  sh:prefix     "patent"
                ];
  sh:declare    [ sh:namespace  "http://busco.ezlab.org/schema#"^^xsd:anyURI;
                  sh:prefix     "busco"
                ];
  sh:declare    [ sh:namespace  "http://purl.orthodb.org/odbgroup/"^^xsd:anyURI;
                  sh:prefix     "orthodbGroup"
                ];
  sh:declare    [] ;
  sh:declare    [ sh:namespace  "http://rdf.ncbi.nlm.nih.gov/pubmed/"^^xsd:anyURI;
                  sh:prefix     "pubmed"
                ];
  sh:declare    [ sh:namesapce  "http://purl.glycoinfo.org/ontology/codao#"^^xsd:anyURI;
                  sh:prefix     "codoa"
                ];
  sh:declare    [ sh:namespace  "http://purl.uniprot.org/enzyme/"^^xsd:anyURI;
                  sh:prefix     "ec"
                ];
  sh:declare    [ sh:namespace  "http://nextprot.org/rdf/entry/"^^xsd:anyURI;
                  sh:prefix     "nextprot"
                ];
  sh:declare    [ sh:namespace  "http://www.wikidata.org/prop/qualifier/"^^xsd:anyURI;
                  sh:prefix     "pq"
                ];
  sh:declare    [ sh:namespace  "http://xmlns.com/foaf/0.1/"^^xsd:anyURI;
                  sh:prefix     "foaf"
                ];
  sh:declare    [ sh:namespace  "https://rdf.metanetx.org/mnet/"^^xsd:anyURI;
                  sh:prefix     "mnet"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/net/orth#"^^xsd:anyURI;
                  sh:prefix     "orth"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/chebi/"^^xsd:anyURI;
                  sh:prefix     "chebislash"
                ];
  sh:declare    [ sh:namespace  "http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#"^^xsd:anyURI;
                  sh:prefix     "sachem"
                ];
  sh:declare    [] ;
  sh:declare    [ sh:namespace  "https://purl.org/glyconnect/"^^xsd:anyURI;
                  sh:prefix     "glyconnect"
                ];
  sh:declare    [ sh:namespace  "http://www.w3.org/2002/07/owl#"^^xsd:anyURI;
                  sh:prefix     "owl"
                ];
  sh:declare    [ sh:namespace  "http://schema.org/"^^xsd:anyURI;
                  sh:prefix     "schema"
                ];
  sh:declare    [ sh:namespace  "https://www.lipidmaps.org/rdf/"^^xsd:anyURI;
                  sh:prefix     "lipidmaps"
                ];
  sh:declare    [ sh:namespace  "http://rdf.ebi.ac.uk/resource/ensembl/"^^xsd:anyURI;
                  sh:prefix     "ensembl"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/lscr#"^^xsd:anyURI;
                  sh:prefix     "lscr"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/ECO_"^^xsd:anyURI;
                  sh:prefix     "ECO"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/chebi#"^^xsd:anyURI;
                  sh:prefix     "chebihash"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/"^^xsd:anyURI;
                  sh:prefix     "obo"
                ];
  sh:declare    [ sh:namespace  "http://id.nlm.nih.gov/mesh/"^^xsd:anyURI;
                  sh:prefix     "mesh"
                ];
  sh:declare    [ sh:namespace  "http://purl.uniprot.org/taxonomy/"^^xsd:anyURI;
                  sh:prefix     "taxon"
                ];
  sh:declare    [ sh:namespace  "http://allie.dbcls.jp/"^^xsd:anyURI;
                  sh:prefix     "allie"
                ];
  sh:declare    [ sh:namespace  "http://rdf.ebi.ac.uk/resource/ensembl.exon/"^^xsd:anyURI;
                  sh:prefix     "ensemblexon"
                ];
  sh:declare    [ sh:namespace  "http://www.w3.org/ns/shacl#"^^xsd:anyURI;
                  sh:prefix     "sh"
                ];
  sh:declare    [ sh:namespace  "http://biohackathon.org/resource/vg#"^^xsd:anyURI;
                  sh:prefix     "vg"
                ];
  sh:declare    [ sh:namespace  "http://www.wikidata.org/prop/direct/"^^xsd:anyURI;
                  sh:prefix     "wdt"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/dc/terms/"^^xsd:anyURI;
                  sh:prefix     "dcterms"
                ];
  sh:declare    [ sh:namespace  "http://wikiba.se/ontology#"^^xsd:anyURI;
                  sh:prefix     "wikibase"
                ];
  sh:declare    [ sh:namespace  "http://www.wikidata.org/prop/statement/"^^xsd:anyURI;
                  sh:prefix     "ps"
                ];
  sh:declare    [ sh:namespace  "http://ddbj.nig.ac.jp/ontologies/nucleotide/"^^xsd:anyURI;
                  sh:prefix     "insdcschema"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/GO_"^^xsd:anyURI;
                  sh:prefix     "GO"
                ];
  sh:declare    [ sh:namespace  "http://purl.org/dc/terms/"^^xsd:anyURI;
                  sh:prefix     "dc"
                ];
  sh:declare    [ sh:namespace  "http://biohackathon.org/resource/faldo#"^^xsd:anyURI;
                  sh:prefix     "faldo"
                ];
  sh:declare    [ sh:namespace  "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI;
                  sh:prefix     "rdf"
                ];
  sh:declare    [] ;
  sh:declare    [ sh:namespace  "http://www.wikidata.org/prop/"^^xsd:anyURI;
                  sh:prefix     "p"
                ];
  sh:declare    [ sh:namespace  "http://purl.orthodb.org/"^^xsd:anyURI;
                  sh:prefix     "orthodb"
                ];
  sh:declare    [ sh:namespace  "http://purl.obolibrary.org/obo/uo#"^^xsd:anyURI;
                  sh:prefix     "uberon"
                ];
  sh:declare    [ sh:namespace  "http://purl.uniprot.org/core/"^^xsd:anyURI;
                  sh:prefix     "up"
                ];
  sh:declare    [ sh:namespace  "http://rdf.rhea-db.org/"^^xsd:anyURI;
                  sh:prefix     "rh"
                ];
  sh:declare    [ sh:namespace  "http://rdf.ebi.ac.uk/resource/ensembl.transcript/"^^xsd:anyURI;
                  sh:prefix     "ensembltranscript"
                ];
  sh:declare    [ sh:namespace  "http://www.wikidata.org/entity/"^^xsd:anyURI;
                  sh:prefix     "wd"
                ]
] .

_:b0    sh:declare    _:b0;
        sh:namespace  "http://spinrdf.org/sp#"^^xsd:anyURI;
        sh:prefix     "sp" .

_:b1    sh:declare    _:b1;
        sh:namespace  "http://eunis.eea.europa.eu/rdf/species-schema.rdf#"^^xsd:anyURI;
        sh:prefix     "eunisSpecies" .
@prefix GO:           <http://purl.obolibrary.org/obo/GO_> .
@prefix allie:        <http://allie.dbcls.jp/> .
@prefix ex:           <https://sparql.uniprot.org/.well-known/sparql-examples/> .
@prefix faldo:        <http://biohackathon.org/resource/faldo#> .
@prefix orthodb:      <http://purl.orthodb.org/> .
@prefix orthodbGroup: <http://purl.orthodb.org/odbgroup/> .
@prefix rdf:          <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:         <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema:       <http://schema.org/> .
@prefix sh:           <http://www.w3.org/ns/shacl#> .
@prefix skos:         <http://www.w3.org/2004/02/skos/core#> .
@prefix taxon:        <http://purl.uniprot.org/taxonomy/> .
@prefix uniprotkb:    <http://purl.uniprot.org/uniprot/> .
@prefix up:           <http://purl.uniprot.org/core/> .

ex:32   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find UniProtKB entries with more than 1 <a href=\"https://www.uniprot.org/help/topo_dom\">Topological domain annotation</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?protein \n    (GROUP_CONCAT(?comment; separator=\", \") AS ?comments)\nWHERE\n{\n    ?protein a up:Protein ;\n            up:annotation ?annotation . \n    ?annotation rdf:type up:Topological_Domain_Annotation ;\n            rdfs:comment ?comment .\n} \nGROUP BY ?protein \nHAVING (COUNT(?annotation) > 1)\n" .

ex:5    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select a mapping of UniProt to PDB entries using the UniProt cross-references to the <a href=\"https://www.uniprot.org/database/DB-0070\">PDB</a> database";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?db\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein rdfs:seeAlso ?db .\n    ?db up:database <http://purl.uniprot.org/database/PDB>\n}" .

ex:38   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData";
        sh:prefixes   ex:;
        sh:select     "\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}\n" .

ex:25   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find any uniprot entry which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}" .

ex:53   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving Sterols (CHEBI:15889). Federating with Rhea-DB and OMABrowser.";
        sh:prefixes   ex:;
        sh:select     "SELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}" .

ex:12   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all UniProt entries that were integrated on the 30th of November 2010";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein\nWHERE\n{\n\t?protein a up:Protein . \n\t?protein up:created '2010-11-30'^^xsd:date\n} " .

ex:40   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL";
        sh:prefixes   ex:;
        sh:select     "\nSELECT DISTINCT \n  ?protein \n  ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n} \n" .

ex:59   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Count all isoforms for a given proteome";
        sh:prefixes   ex:;
        sh:select     "PREFIX proteome:<http://purl.uniprot.org/proteomes/>\nSELECT\n  (COUNT(DISTINCT ?sequence) AS ?allIsoforms)\nWHERE\n{\n  ?protein up:reviewed true .\n  ?protein up:organism taxon:9606 .\n  ?protein up:sequence ?sequence .\n  ?protein up:proteome/^skos:narrower proteome:UP000005640 .\n}" .

ex:18   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select the number of UniProt entries for each of the EC (Enzyme Commission) top level categories";
        sh:prefixes   ex:;
        sh:select     "SELECT ?ecClass (COUNT(?protein) as ?size)\nWHERE\n{\n    VALUES (?ecClass) {(ec:1.-.-.-) (ec:2.-.-.-) (ec:3.-.-.-) (ec:4.-.-.-) (ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)} .\n    ?protein ( up:enzyme | up:domain/up:enzyme | up:component/up:enzyme ) ?enzyme .\n    # Enzyme subclasses are materialized, do not use rdfs:subClassOf+\n    ?enzyme rdfs:subClassOf ?ecClass .\n}\nGROUP BY ?ecClass ORDER BY ?ecClass\n" .

ex:46   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve images of 'Anas' (Ducks) from the European Environmental Agency databases (federated query).";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?taxon\n    ?ncbiTaxid\n    ?eunisTaxon\n    ?eunisName \n    ?image\nWHERE\n{\n    GRAPH <http://sparql.uniprot.org/taxonomy>\n    {\n        ?taxon a up:Taxon .\n        # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n        ?taxon rdfs:subClassOf taxon:8835 .\n        BIND(strafter(str(?taxon), 'onomy/') AS ?ncbiTaxid)\n    }\n    SERVICE <https://semantic.eea.europa.eu/sparql>\n    {\n        ?eunisTaxon a eunisSpecies:SpeciesSynonym ;\n           eunisSpecies:binomialName ?eunisName ;\n           eunisSpecies:sameSpeciesNCBI ?ncbiTaxid ;\n           <http://xmlns.com/foaf/0.1/depiction> ?image .\n    }\n}\n" .

ex:33   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find longest comment text associated with a UniProtKB Natural Variant Annotation";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?annotation ?comment\nWHERE {\n    ?annotation a up:Natural_Variant_Annotation ;\n        rdfs:comment ?comment . \n} \nORDER BY DESC(STRLEN(?comment))\n" .

ex:20   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find how often an article in pubmed was used in an evidence tag in a human protein (ordered by most used to least)";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?source \n    (COUNT(?attribution) AS ?attribitions)\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ;\n            up:annotation ?annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n} GROUP BY ?source ORDER BY DESC(COUNT(?attribution))\n" .

ex:6    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all cross-references to external databases of the category <a href=\"https://www.uniprot.org/database?query=category_exact%3A%223D%20structure%20databases%22\">'3D structure databases'</a> of UniProt entries that are classified with the keyword <a href=\"https://www.uniprot.org/keywords/5\">'Acetoin biosynthesis (KW-0005)'</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT DISTINCT ?link\nWHERE\n{\n    ?protein a up:Protein . \n    ?protein up:classifiedWith keywords:5 .\n    ?protein rdfs:seeAlso ?link .\n    ?link up:database ?db .\n    ?db up:category '3D structure databases'\n}" .

ex:39   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve entries and Catalytic activities in the reviewed (Swiss-Prot) section that have experimental evidences,";
        sh:prefixes   ex:;
        sh:select     "SELECT  \n  ?protein\n  ?rhea \nWHERE {\n  # ECO 269 is experimental evidence\n  BIND (<http://purl.obolibrary.org/obo/ECO_0000269> as ?evidence)\n  GRAPH <http://sparql.uniprot.org/uniprot> {\n    ?protein up:reviewed true ;\n      up:annotation ?a ;\n      up:attribution ?attribution  .\n\n    ?a a up:Catalytic_Activity_Annotation ;\n      up:catalyticActivity ?ca .\n    ?ca up:catalyzedReaction ?rhea .\n  \n    [] rdf:subject ?a ;\n      rdf:predicate up:catalyticActivity ;\n      rdf:object ?ca ;\n      up:attribution ?attribution .\n\n    ?attribution up:evidence ?evidence .\n  }\n}\n" .

ex:26   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find any uniprot entry, or an uniprot entries domain or component which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?anyKindOfName\nWHERE\n{\n\t\t?protein a up:Protein .\n\t\t?protein (up:recommendedName|up:alternativeName)|((up:domain|up:component)/(up:recommendedName|up:alternativeName)) ?structuredName .\n\t\t?structuredName ?anyKindOfName  \"HLA class I histocompatibility antigen, B-73 alpha chain\" .\n\t\t?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}" .

ex:54   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Proteins with annotated binding sites for ligands similar to heme";
        sh:prefixes   ex:;
        sh:select     "SELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)" .

ex:13   rdf:type      sh:SPARQLExecutable , sh:SPARQLAskExecutable;
        rdfs:comment  "Was any UniProt entry integrated on the 9th of January 2013";
        sh:ask        "ASK\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:created '2013-01-09'^^xsd:date\n}";
        sh:prefixes   ex: .

ex:41   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve entries with sequences that are composed of fragments";
        sh:prefixes   ex:;
        sh:select     "\nSELECT DISTINCT \n  ?protein\nWHERE {\n  ?protein a up:Protein ;\n    up:sequence ?sequence .\n  MINUS { ?sequence up:fragment [] }\n} " .

ex:1    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all taxa from the <a href=\"https://www.uniprot.org/taxonomy/\">UniProt taxonomy</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT ?taxon\nFROM <http://sparql.uniprot.org/taxonomy>\nWHERE\n{\n    ?taxon a up:Taxon .\n}" .

ex:19   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find all Natural Variant Annotations if associated via an evidence tag to an article with a pubmed identifier";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?accession\n    ?annotation_acc \n    ?pubmed\nWHERE\n{\n        ?protein a up:Protein ;\n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation .\n        ?linkToEvidence rdf:object ?annotation ;\n                        up:attribution ?attribution .\n        ?attribution up:source ?source .\n        ?source a up:Journal_Citation .\n  BIND(SUBSTR(STR(?protein),33) AS ?accession)\n  BIND(IF(CONTAINS(STR(?annotation), \"#SIP\"), SUBSTR(STR(?annotation),33), SUBSTR(STR(?annotation),36))AS?annotation_acc)\n  BIND(SUBSTR(STR(?source),35) AS ?pubmed)\n}\n" .

ex:47   rdf:type     sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:label   "Find UniProt entries with a transmembrane region, with an Alanine in the 15 Aminoacid region preceding the transmembrane";
        sh:prefixes  ex:;
        sh:select    "\nSELECT ?protein ?from ?interestingRegion\nWHERE\n{\n  ?protein up:annotation ?annotation .\n  ?annotation a up:Transmembrane_Annotation .\n  # Get the coordinates of the Transmembrane\n  ?annotation up:range ?range .\n  ?range faldo:begin ?beginI .\n  ?beginI faldo:position ?begin .\n  ?beginI faldo:reference ?sequence .\n  # The aas will have the specific IUPAC aminoacids\n  ?sequence rdf:value ?aas .\n  # We calculate the start by substracting 10\n  BIND(?begin - 10 AS ?tenBeforeBegin)\n  # Can't start before the sequence starts or we might miss some results\n  BIND(IF(?tenBeforeBegin < 1, 0, ?tenBeforeBegin) AS ?from)\n  # Substring the IUPAC aminoacids\n  BIND(SUBSTR(?aas, ?from, 15) AS ?interestingRegion)\n  # The interestingRegion needds to contain an Alanine\n  FILTER(CONTAINS(?interestingRegion, 'A'))\n}\n" .

ex:34   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the co-occurence count of Topological Domain comment text in UniProtKB entries";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?comment1 \n    ?comment2 \n    (COUNT(?comment1) AS ?count1)\nWHERE\n{\n    ?protein a up:Protein ;\n               up:annotation ?annotation1 , \n                             ?annotation2 . \n    ?annotation1 rdf:type up:Topological_Domain_Annotation ;\n        rdfs:comment ?rawComment1 .\n    ?annotation2 rdf:type up:Topological_Domain_Annotation ;\n        rdfs:comment ?rawComment2 . \n    BIND(IF(contains(?rawComment1, ';'), \n            STRBEFORE(?rawComment1,';'), \n            ?rawComment1) AS ?comment1)\n    BIND(IF(contains(?rawComment2, ';'), \n            STRBEFORE(?rawComment2,';'), \n            ?rawComment2) AS ?comment2)\n    FILTER(?annotation1 != ?annotation2)\n} \nGROUP BY ?comment1 ?comment2 \nORDER BY DESC(COUNT(?comment1))\n" .

ex:21   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find where disease related proteins are known to be located in the cell";
        sh:prefixes   ex:;
        sh:select     "\nSELECT \n    ?protein \n    ?disease \n    ?location_inside_cell \n    ?cellcmpt\nWHERE\n{\n    ?protein up:annotation ?diseaseAnnotation , ?subcellAnnotation .\n    ?diseaseAnnotation up:disease/skos:prefLabel ?disease .\n    ?subcellAnnotation up:locatedIn/up:cellularComponent ?cellcmpt .\n    ?cellcmpt skos:prefLabel ?location_inside_cell .\n}\n" .

ex:7    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select reviewed UniProt entries (Swiss-Prot), and their recommended protein name, that have a preferred gene name that contains the text 'DNA'";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?name\nWHERE\n{\n        ?protein a up:Protein .\n        ?protein up:reviewed true .\n        ?protein up:recommendedName ?recommended .\n        ?recommended up:fullName ?name .\n        ?protein up:encodedBy ?gene .\n        ?gene skos:prefLabel ?text .\n        FILTER CONTAINS(?text, 'DNA')\n}\n" .

ex:27   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find all names associated with uniprot entry P05067, and if the name is associated with the entry it's domains or its components";
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?protein\n  ?anyKindOfName \n  ?names \n  ?partType\nWHERE\n{\n  BIND(<http://purl.uniprot.org/uniprot/P05067> AS ?protein)\n  ?protein a up:Protein .\n  {\n    ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n    UNION\n  {\n    VALUES(?partType){(up:domain) (up:component)}\n    ?protein ?partType ?part .\n    ?part (up:recommendedName|up:alternativeName) ?structuredName .\n  }\n  ?structuredName ?anyKindOfName  ?names .\n  ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}" .

ex:55   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Number of proteins with annotated binding sites for metals or metal sulfur clusters (and experimental evidence for the binding)";
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?ligand\n  ?ligandName \n  (COUNT(DISTINCT ?protein) as ?entries)\nWHERE {\n   ?protein up:annotation ?annotation .\n   \n   VALUES ?evs { obo:ECO_0000269 obo:ECO_0007744 } .\n   VALUES ?chebids { CHEBI:25213 CHEBI:25214 } .\n   ?st rdf:subject ?protein ; \n       rdf:predicate up:annotation ; \n       rdf:object ?annotation ;\n       up:attribution/up:evidence ?evs .\n\n   ?annotation up:ligand/rdfs:subClassOf ?ligand .\n   ?ligand rdfs:subClassOf+ ?chebids ;\n     rdfs:label ?ligandName .\n}\nGROUP BY ?ligand ?ligandName\nORDER BY DESC(?entries)" .

ex:14   rdf:type      sh:SPARQLExecutable , sh:SPARQLConstructExecutable;
        rdfs:comment  "Construct new triples of the type 'HumanProtein' from all human UniProt entries";
        sh:construct  "CONSTRUCT\n{\n\t?protein a up:HumanProtein .\n}\nWHERE\n{\n\t?protein a up:Protein .\n\t?protein up:organism taxon:9606\n}";
        sh:prefixes   ex: .

ex:42   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.";
        sh:prefixes   ex:;
        sh:select     "\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE<https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}" .

ex:2    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all bacterial taxa and their scientific name from the <a href=\"https://www.uniprot.org/taxonomy/\">UniProt taxonomy</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT ?taxon ?name\nWHERE\n{\n    ?taxon a up:Taxon .\n    ?taxon up:scientificName ?name .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?taxon rdfs:subClassOf taxon:2 .\n}" .

ex:48   rdf:type     sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:label   "Retrieve glycosylation sites and glycans on human enzymes (federated with glyconnect)";
        sh:prefixes  ex:;
        sh:select    "SELECT\n        DISTINCT\n            ?protein ?glycosite ?glycostructure ?glycoimage\nWHERE{\n  ?protein up:annotation ?annotation .\n  ?protein up:organism taxon:9606 .\n  ?annotation a up:Catalytic_Activity_Annotation .\n  ?protein up:sequence ?isoform .\n   \n  SERVICE <http://sparql.glyconnect.org/sparql> {\n    ?glycosite faldo:reference ?isoform .\n    ?glycosite faldo:position ?position .\n    ?specificglycosite faldo:location ?glycosite .\n    ?glycoprotein glycan:glycosylated_at ?specificglycosite .\n    ?glycostructure glycan:glycosylates_at ?specificglycosite .\n    ?glycostructure foaf:depiction ?glycoimage .\n  }\n}" .

ex:35   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the similar proteins for UniProtKB entry P05067 sorted by UniRef cluser identity";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?similar ?identity\nFROM <http://sparql.uniprot.org/uniref>\nFROM <http://sparql.uniprot.org/uniprot>\nWHERE\n{\n    BIND (uniprotkb:P05607 AS ?protein)\n    ?cluster up:member ?member ;\n             up:member/up:sequenceFor ?protein;\n             up:identity ?identity .\n    ?member up:sequenceFor ?similar .\n    FILTER(!sameTerm(?similar, ?protein))\n} \nORDER BY DESC(?identity)\n" .

ex:22   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "For two accessions find the GO term labels and group them into GO process,function and component";
        sh:prefixes   ex:;
        sh:select     "\nSELECT \n    (CONCAT(SUBSTR(STR(?protein), 33)) AS ?uniprot)\n    (GROUP_CONCAT(?celtype; separator=\";\") AS ?celtypes)\n    (GROUP_CONCAT(?biotype; separator=\";\") AS ?biotypes)\n    (GROUP_CONCAT(?moltype; separator=\";\") AS ?moltypes)\nWHERE\n{\n    VALUES (?ac) {(\"Q6GZX4\") (\"Q96375\")}\n    BIND (IRI(CONCAT(\"http://purl.uniprot.org/uniprot/\",?ac)) AS ?protein)\n    ?protein a up:Protein .\n    ?protein up:classifiedWith ?goTerm .\n    #Determine if the type is biological_process\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0008150>.\n        ?goTerm rdfs:label ?biotype .\n    }\n    #Determine if the type is cellular_component\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0005575>.\n        ?goTerm rdfs:label ?celtype .\n    }\n    #Determine if the type is molecular_function\n    OPTIONAL {\n        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0003674> .\n        ?goTerm rdfs:label ?moltype .\n    }\n    #Filter out the uniprot keywords\n    FILTER(bound(?biotype) || bound(?celtype) || bound(?moltype))\n} GROUP BY ?protein\n" .

ex:8    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select the preferred gene name and disease annotation of all human UniProt entries that are known to be involved in a disease";
        sh:prefixes   ex:;
        sh:select     "SELECT ?name ?text\nWHERE\n{\n        ?protein a up:Protein . \n        ?protein up:organism taxon:9606 .\n        ?protein up:encodedBy ?gene . \n        ?gene skos:prefLabel ?name .\n        ?protein up:annotation ?annotation .\n        ?annotation a up:Disease_Annotation .\n        ?annotation rdfs:comment ?text\n}" .

ex:50   rdf:type     sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:label   "Where are the human genes encoding enzymes metabolizing N-acyl\nsphingosines expressed in the human body (federated query, with Rhea and Bgee)";
        sh:prefixes  ex:;
        sh:select    "SELECT\n  DISTINCT\n    ?chebi \n    ?reaction \n    ?protein ?ensemblGene\n    ?anatomicEntityLabel\n    ?anatomicEntity\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:equation ?reactionEquation .\n    ?reaction rh:side ?reactionSide .\n    ?reactionSide rh:contains ?participant .\n    ?participant rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:52639\n}\n  ?protein up:organism taxon:9606 .\n  ?protein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  ?protein rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n\n  SERVICE  <https://bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatomicEntity .\n    ?gene lscr:xrefEnsemblGene ?ensemblGene .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}" .

ex:28   rdf:type                sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment            "Get the list of uniprot entries for the chromosome of proteome <a href=\"https://www.uniprot.org/proteomes/UP000000625\">UP000000625</a>"^^rdf:HTML;
        schema:potentialAction  [ schema:description  "UniProtKB rest search with sparql";
                                  schema:target       <https://www.uniprot.org/sparql/>
                                ];
        sh:prefixes             ex:;
        sh:select               "SELECT \n  ?protein\n  ?proteome \nWHERE\n{\n  ?protein a up:Protein ;\n           up:reviewed true ;\n           up:proteome ?proteome .\n  VALUES (?proteome) {(<http://purl.uniprot.org/proteomes/UP000000625#Chromosome>)}\n}" .

ex:56   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select Enzymes that have Ligands that have a known allosteric effect";
        rdfs:seeAlso  <https://www.youtube.com/watch?v=DuSinQd9YhA>;
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?protein\n  ?ligandName \n  ?ligandNote\n  ?chebi\nWHERE {\n   ?protein up:annotation ?annotation .\n   ?annotation a up:Binding_Site_Annotation . \n   ?annotation up:ligand ?ligand .\n   ?ligand rdfs:comment ?ligandNote ;\n     rdfs:subClassOf ?chebi ;\n     rdfs:label ?ligandName .\n   FILTER(REGEX(?ligandNote, \"allosteric\", \"i\"))\n}\n" .

ex:15   rdf:type      sh:SPARQLExecutable;
        rdfs:comment  "Select all triples that relate to the EMBL CDS entry AA089367.1: ";
        sh:describe   "DESCRIBE <http://purl.uniprot.org/embl-cds/AAO89367.1>\n" .

ex:43   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.";
        sh:prefixes   ex:;
        sh:select     "\nPREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> \nPREFIX skos:<http://www.w3.org/2004/02/skos/core#> \nPREFIX up:<http://purl.uniprot.org/core/> \nprefix patent: <http://data.epo.org/linked-data/def/patent/>\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE<https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n                 patent:application ?application . \n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear" .

ex:30   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find UniProt entries with merged loci in <a href=\"https://www.uniprot.org/taxonomy/360910\">Bordetella avium</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?protein \n  (GROUP_CONCAT(?locusName; separator=',') AS ?locusNames)\nWHERE \n{ \n  ?protein a up:Protein ;\n    up:organism taxon:360910 ;\n    up:encodedBy ?gene .\n  ?gene up:locusName ?locusName .\n} \nGROUP BY ?protein \nHAVING (COUNT(?locusName) > 1)\n" .

ex:3    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all UniProt entries, and their organism and amino acid sequences (including isoforms), for <a href=\"http://purl.uniprot.org/taxonomy/83333\"><i>E. coli K12</i> and all its strains</a>"^^rdfs:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?organism ?isoform ?sequence\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:organism ?organism .\n    # Taxon subclasses are materialized, do not use rdfs:subClassOf+\n    ?organism rdfs:subClassOf taxon:83333 .\n    ?protein up:sequence ?isoform .\n    ?isoform rdf:value ?sequence .\n}" .

ex:49   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve the UniProt proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).";
        rdfs:label    "Where are the human genes encoding enzymes metabolizing cholesterol expressed? (double federated query)";
        sh:prefixes   ex:;
        sh:select     "SELECT\n        DISTINCT \n            ?protein\n            ?ensemblGene\n            ?reaction\n            ?anatomicEntityLabel\n            ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction .\n        ?reaction rh:equation ?reactionEquation .\n        ?reaction rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 .\n  ?protein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  ?protein rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n\n  # federated query to Bgee (expression data)\n  SERVICE <http://biosoda.expasy.org/rdf4j-server/repositories/bgeelight> {\n    ?gene genex:isExpressedIn ?anatomicEntity .\n    ?gene lscr:xrefEnsemblGene ?ensemblGene .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}" .

ex:36   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT \n  ?protein \n  ?orthoGroup\n  ?scientificName \n  ?functionComment \n  ?prefferedGeneName \n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n             up:sequence/rdf:value ?value .\n  OPTIONAL {\n     ?protein up:annotation ?functionAnnotation .\n     ?functionAnnotation a up:Function_Annotation ;\n                         rdfs:comment ?functionComment .\n  }\n  SERVICE<http://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\n" .

ex:23   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Number of reviewed entries (Swiss-Prot) that are related to <a href=\"http://amigo.geneontology.org/amigo/term/GO:0016301\">kinase activity</a>";
        sh:prefixes   ex:;
        sh:select     "SELECT\n    (COUNT(DISTINCT(?protein)) AS ?pc)\nWHERE\n{   \n    ?protein rdf:type up:Protein ;\n        up:reviewed true  ;\n        up:organism taxon:9606 ;\n        up:classifiedWith|(up:classifiedWith/rdfs:subClassOf) GO:0016301 .\n}" .

ex:9    rdf:type                sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment            "Select all human UniProt entries with a sequence variant that leads to a 'loss of function'";
        schema:potentialAction  [ schema:description  "UniProtKB rest search with sparql";
                                  schema:target       <https://www.uniprot.org/sparql/>
                                ];
        sh:prefixes             ex:;
        sh:select               "SELECT ?protein ?text\nWHERE\n{ \n        ?protein a up:Protein .\n        ?protein up:organism taxon:9606 . \n        ?protein up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation . \n        ?annotation rdfs:comment ?text .\n        FILTER (CONTAINS(?text, 'loss of function'))\n}" .

ex:51   rdf:type     sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:label   "Find all proteins linked to arachidonate (CHEBI:32395)";
        sh:prefixes  ex:;
        sh:select    "\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}" .

ex:10   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all human UniProt entries with a sequence variant that leads to a tyrosine to phenylalanine substitution";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?annotation ?begin ?text\nWHERE\n{\n        ?protein a up:Protein ;\n            up:organism taxon:9606 ; \n            up:annotation ?annotation .\n        ?annotation a up:Natural_Variant_Annotation ;\n            rdfs:comment ?text ;\n            up:substitution ?substitution ;\n            up:range/faldo:begin\n                [ faldo:position ?begin ;\n                  faldo:reference ?sequence ] .\n        ?sequence rdf:value ?value .\n        BIND (substr(?value, ?begin, 1) as ?original) .\n        FILTER(?original = 'Y' && ?substitution = 'F') .\n} " .

ex:29   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese."^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT\n    ?protein ?englishLabelStr\nWHERE {\n    SERVICE<http://data.allie.dbcls.jp/sparql>{\n            ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n                rdfs:label ?englishLabel .\n            FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n          VALUES(?partType){(up:domain) (up:component)}\n                  ?protein ?partType ?part .\n          ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}\n" .

ex:57   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Map PDB identifiers plus chains to UniProt";
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?pdbId ?chain ?pdbChain ?uniprot\nWHERE\n{\n  # A space separated list of pairs of PDB identifiers and the chain code.\n  VALUES(?pdbId ?pdbChain) { ('6VXC' 'A') ('1BG3' 'B') }\n\n  # Make an IRI out of the pdbId\n  BIND(iri(concat('http://rdf.wwpdb.org/pdb/', ?pdbId)) AS ?pdb)\n\n  # Map to UniProt entries\n  ?uniprot rdfs:seeAlso ?pdb .\n  ?pdb up:database <http://purl.uniprot.org/database/PDB> ;\n       up:chainSequenceMapping ?chainSm .\n  ?chainSm up:chain ?chainsPlusRange .\n\n  # Extract the list of chains from the text representation.\n  BIND(STRBEFORE(?chainsPlusRange, '=') AS ?chain)\n\n  # Filter those that match.\n  FILTER(CONTAINS(?chain, ?pdbChain))\n}" .

ex:16   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all triples that relate to the taxon that describes <i>Homo sapiens</i> in the named graph for <a href=\"http://sparql.uniprot.org/taxonomy\">taxonomy</a>"^^rdf:HTML;
        sh:describe   "DESCRIBE taxon:9606 \nFROM <http://sparql.uniprot.org/taxonomy>\n";
        sh:prefixes   ex: .

ex:44   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the Rhea and Interpro combinations in UniProtKB entries.";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    ?interpro\n\t?rhea\nFROM <http://sparql.uniprot.org/uniprot>\nWHERE \n{\n  ?protein up:reviewed true .\n  ?protein up:annotation ?annotation .\n  ?annotation up:catalyticActivity ?rhea .\n  ?protein rdfs:seeAlso ?interpro .\n  ?interpro up:database <http://purl.uniprot.org/database/InterPro> .\n} ORDER BY ?rhea" .

ex:31   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find UniParc records whose sequence point to the most database entries";
        sh:prefixes   ex:;
        sh:select     "SELECT ?sequence ?entries\nWHERE\n{\n    SELECT \n        ?sequence \n        (COUNT(?entry) AS ?entries)\n    WHERE\n    {\n        GRAPH <http://sparql.uniprot.org/uniparc> {\n            ?sequence up:sequenceFor ?entry .\n        }\n    } GROUP BY ?sequence\n} ORDER BY DESC(?entries)   \n" .

ex:4    rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select the UniProt entry with the <a href=\"https://www.uniprot.org/manual/entry_name\">mnemonic</a> 'A4_HUMAN'"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein\nWHERE\n{\n    ?protein a up:Protein .\n    ?protein up:mnemonic 'A4_HUMAN'\n}" .

ex:37   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the human protein which contains an Epitope VSTQ, where T is a phosporylated threonine";
        sh:prefixes   ex:;
        sh:select     "SELECT \n  ?protein \n  ?comment\n  ?begin\n  ?end \nWHERE\n{\n  ?protein a up:Protein ;\n    up:organism taxon:9606 ; \n    up:sequence ?sequence ;\n    up:annotation ?annotation .\n  ?annotation a up:Modified_Residue_Annotation ;\n    rdfs:comment ?comment ;\n    up:range ?range .\n  ?range \n    faldo:begin [ faldo:position ?begin ; faldo:reference ?sequence ] ;\n    faldo:end [ faldo:position ?end ; faldo:reference ?sequence ] .\n  ?sequence rdf:value ?aaSequence .\n  FILTER (SUBSTR(?aaSequence, ?begin -2 , 4) = \"VSTQ\")     \n  FILTER (CONTAINS(?comment, \"Phosphothreonine\"))\n}\n" .

ex:24   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Find the release number of the uniprot data that is currently being queried";
        sh:prefixes   ex:;
        sh:select     "SELECT\n    ?version    \nFROM <http://sparql.uniprot.org/.well-known/void>\nWHERE\n{   \n    [] <http://purl.org/pav/version> ?version\n}" .

ex:52   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).";
        sh:prefixes   ex:;
        sh:select     "SELECT\n        DISTINCT  \n            ?protein \n            ?proteinFullName \n            ?activityType \n            ?standardActivityValue \n            ?standardActivityUnit \n            ?chemblMolecule \n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    { \n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions \n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> { \n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}" .

ex:11   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select all UniProt entries with annotated transmembrane regions and the regions' begin and end coordinates on the canonical sequence";
        sh:prefixes   ex:;
        sh:select     "SELECT ?protein ?begin ?end\nWHERE \n{\n\t?protein a up:Protein .\n\t?protein up:annotation ?annotation .\n\t?annotation a up:Transmembrane_Annotation .\n\t?annotation up:range ?range .\n\t?range faldo:begin/faldo:position ?begin .\n\t?range faldo:end/faldo:position ?end\n}" .

ex:58   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Map UniProt to HGNC identifiers and Symbols";
        sh:prefixes   ex:;
        sh:select     "SELECT\n  ?uniprot\n  ?hgnc\n  ?hgncSymbol\nWHERE\n{\n  # A space separated list of UniProt primary accessions.\n  VALUES (?acc) {('P05067') ('P00750')}\n  BIND(iri(concat(str(uniprotkb:), ?acc)) AS ?uniprot)\n  ?uniprot rdfs:seeAlso ?hgnc .\n  ?hgnc up:database <http://purl.uniprot.org/database/HGNC> ;\n       rdfs:comment ?hgncSymbol .\n}" .

ex:17   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Select the average number of cross-references to the <a href=\"${uniprot}database/DB-0070\">PDB</a> database of UniProt entries that have at least one cross-reference to the PDB database"^^rdf:HTML;
        sh:prefixes   ex:;
        sh:select     "SELECT (AVG(?linksToPdbPerEntry) AS ?avgLinksToPdbPerEntry)\nWHERE\n{\n\tSELECT ?protein (COUNT(DISTINCT ?db) AS ?linksToPdbPerEntry)\n\tWHERE\n\t{\n\t\t?protein a up:Protein .\n\t\t?protein rdfs:seeAlso ?db .\n\t\t?db up:database <http://purl.uniprot.org/database/PDB> .\n\t}\n\tGROUP BY ?protein ORDER BY DESC(?linksToPdbPerEntry)\n}" .

ex:45   rdf:type      sh:SPARQLExecutable , sh:SPARQLSelectExecutable;
        rdfs:comment  "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).";
        sh:prefixes   ex:;
        sh:select     "SELECT \n    DISTINCT\n        ?protein\n        ?proteinFullName\n        ?wikiChemical\n\t\t?wikiChemicalLabel\n        ?medicalConditionTreatedLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    { \n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions \n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE<https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein . \n    ?wikiChemical wdt:P129  ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}   " .
