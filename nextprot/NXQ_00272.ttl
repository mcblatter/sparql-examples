prefix ex: <https://sparql.nextprot.org/.well-known/sparql-examples>
prefix sh: <http://www.w3.org/ns/shacl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>
ex:NXQ_00272
 sh:prefixes _:sparql_examples_prefixes ;
  rdfs:comment '''Proteins involved in coronaviruses/SARS-CoV-2 pathways with associated medical information''' ;
  sh:select '''PREFIX wp: <http://vocabularies.wikipathways.org/wp#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dcterms: <http://purl.org/dc/terms/>

select distinct ?entry (str(?gen) AS ?gene) ?pathwayname (str(?discom) AS ?discom1) ?medsource where {
 service <http://sparql.wikipathways.org/sparql> {
 {?geneProduct a wp:Protein}
 union
 {?geneProduct a wp:GeneProduct}

 ?geneProduct rdfs:label ?genraw .
 bind (concat( \"\"^^xsd:string, ?genraw) as ?gen).
 filter(!regex(?gen,\"[ a-z-]\")). # ensures official gene names for subsequent neXtprot matching

 ?geneProduct dcterms:isPartOf ?pathway .
 ?pathway a wp:Pathway .
 ?pathway wp:organism ?organism .
 filter(contains(str(?organism),\"9606\"))

 ?pathway dc:title ?pathwayname .
 filter(regex(?pathwayname,\"sars-cov-2\",\"i\")|| regex(?pathwayname,\"corona\",\"i\") ).
 }

 ?entry a np:Entry .
 ?entry np:gene / np:recommendedName / rdfs:label ?gen .
 ?entry np:isoform ?iso.
 ?iso np:medical ?med.
 ?med rdfs:comment ?discom.
 ?med np:evidence/np:assignedBy ?medsource.
}
order by ?entry'''
.
